program aleo_contract.aleo;

struct Point:
    x as i64;
    y as i64;

struct PointsCombinationDistance:
    point1 as Point;
    point2 as Point;
    distance as i64;


mapping accountReferencePoints:
	key as address.public;
	value as [Point; 21u32].public;



function set_reference_points:
    input r0 as address.private;
    input r1 as [Point; 21u32].private;
    async set_reference_points r0 r1 into r2;
    output r2 as aleo_contract.aleo/set_reference_points.future;

finalize set_reference_points:
    input r0 as address.public;
    input r1 as [Point; 21u32].public;
    set r1 into accountReferencePoints[r0];


function verify:
    input r0 as address.private;
    input r1 as [Point; 21u32].private;
    async verify r0 r1 into r2;
    output r2 as aleo_contract.aleo/verify.future;

finalize verify:
    input r0 as address.public;
    input r1 as [Point; 21u32].public;
    get accountReferencePoints[r0] into r2;
    gt r2[12u32].x r2[8u32].x into r3;
    sub r2[12u32].x r2[8u32].x into r4;
    sub r2[8u32].x r2[12u32].x into r5;
    ternary r3 r4 r5 into r6;
    gt r2[12u32].y r2[8u32].y into r7;
    sub r2[12u32].y r2[8u32].y into r8;
    sub r2[8u32].y r2[12u32].y into r9;
    ternary r7 r8 r9 into r10;
    mul r6 r6 into r11;
    mul r10 r10 into r12;
    add r11 r12 into r13;
    cast r2[8u32] r2[12u32] r13 into r14 as PointsCombinationDistance;
    gt r2[16u32].x r2[12u32].x into r15;
    sub r2[16u32].x r2[12u32].x into r16;
    sub r2[12u32].x r2[16u32].x into r17;
    ternary r15 r16 r17 into r18;
    gt r2[16u32].y r2[12u32].y into r19;
    sub r2[16u32].y r2[12u32].y into r20;
    sub r2[12u32].y r2[16u32].y into r21;
    ternary r19 r20 r21 into r22;
    mul r18 r18 into r23;
    mul r22 r22 into r24;
    add r23 r24 into r25;
    cast r2[12u32] r2[16u32] r25 into r26 as PointsCombinationDistance;
    gt r2[20u32].x r2[16u32].x into r27;
    sub r2[20u32].x r2[16u32].x into r28;
    sub r2[16u32].x r2[20u32].x into r29;
    ternary r27 r28 r29 into r30;
    gt r2[20u32].y r2[16u32].y into r31;
    sub r2[20u32].y r2[16u32].y into r32;
    sub r2[16u32].y r2[20u32].y into r33;
    ternary r31 r32 r33 into r34;
    mul r30 r30 into r35;
    mul r34 r34 into r36;
    add r35 r36 into r37;
    cast r2[16u32] r2[20u32] r37 into r38 as PointsCombinationDistance;
    gt r2[8u32].x r2[0u32].x into r39;
    sub r2[8u32].x r2[0u32].x into r40;
    sub r2[0u32].x r2[8u32].x into r41;
    ternary r39 r40 r41 into r42;
    gt r2[8u32].y r2[0u32].y into r43;
    sub r2[8u32].y r2[0u32].y into r44;
    sub r2[0u32].y r2[8u32].y into r45;
    ternary r43 r44 r45 into r46;
    mul r42 r42 into r47;
    mul r46 r46 into r48;
    add r47 r48 into r49;
    cast r2[0u32] r2[8u32] r49 into r50 as PointsCombinationDistance;
    gt r2[12u32].x r2[0u32].x into r51;
    sub r2[12u32].x r2[0u32].x into r52;
    sub r2[0u32].x r2[12u32].x into r53;
    ternary r51 r52 r53 into r54;
    gt r2[12u32].y r2[0u32].y into r55;
    sub r2[12u32].y r2[0u32].y into r56;
    sub r2[0u32].y r2[12u32].y into r57;
    ternary r55 r56 r57 into r58;
    mul r54 r54 into r59;
    mul r58 r58 into r60;
    add r59 r60 into r61;
    cast r2[0u32] r2[12u32] r61 into r62 as PointsCombinationDistance;
    gt r2[16u32].x r2[0u32].x into r63;
    sub r2[16u32].x r2[0u32].x into r64;
    sub r2[0u32].x r2[16u32].x into r65;
    ternary r63 r64 r65 into r66;
    gt r2[16u32].y r2[0u32].y into r67;
    sub r2[16u32].y r2[0u32].y into r68;
    sub r2[0u32].y r2[16u32].y into r69;
    ternary r67 r68 r69 into r70;
    mul r66 r66 into r71;
    mul r70 r70 into r72;
    add r71 r72 into r73;
    cast r2[0u32] r2[16u32] r73 into r74 as PointsCombinationDistance;
    gt r2[20u32].x r2[0u32].x into r75;
    sub r2[20u32].x r2[0u32].x into r76;
    sub r2[0u32].x r2[20u32].x into r77;
    ternary r75 r76 r77 into r78;
    gt r2[20u32].y r2[0u32].y into r79;
    sub r2[20u32].y r2[0u32].y into r80;
    sub r2[0u32].y r2[20u32].y into r81;
    ternary r79 r80 r81 into r82;
    mul r78 r78 into r83;
    mul r82 r82 into r84;
    add r83 r84 into r85;
    cast r2[0u32] r2[20u32] r85 into r86 as PointsCombinationDistance;
    cast r14r26r38r50r62r74r86 into r87 as [PointsCombinationDistance; 7u32];
    gt r1[12u32].x r1[8u32].x into r88;
    sub r1[12u32].x r1[8u32].x into r89;
    sub r1[8u32].x r1[12u32].x into r90;
    ternary r88 r89 r90 into r91;
    gt r1[12u32].y r1[8u32].y into r92;
    sub r1[12u32].y r1[8u32].y into r93;
    sub r1[8u32].y r1[12u32].y into r94;
    ternary r92 r93 r94 into r95;
    mul r91 r91 into r96;
    mul r95 r95 into r97;
    add r96 r97 into r98;
    cast r1[8u32] r1[12u32] r98 into r99 as PointsCombinationDistance;
    gt r1[16u32].x r1[12u32].x into r100;
    sub r1[16u32].x r1[12u32].x into r101;
    sub r1[12u32].x r1[16u32].x into r102;
    ternary r100 r101 r102 into r103;
    gt r1[16u32].y r1[12u32].y into r104;
    sub r1[16u32].y r1[12u32].y into r105;
    sub r1[12u32].y r1[16u32].y into r106;
    ternary r104 r105 r106 into r107;
    mul r103 r103 into r108;
    mul r107 r107 into r109;
    add r108 r109 into r110;
    cast r1[12u32] r1[16u32] r110 into r111 as PointsCombinationDistance;
    gt r1[20u32].x r1[16u32].x into r112;
    sub r1[20u32].x r1[16u32].x into r113;
    sub r1[16u32].x r1[20u32].x into r114;
    ternary r112 r113 r114 into r115;
    gt r1[20u32].y r1[16u32].y into r116;
    sub r1[20u32].y r1[16u32].y into r117;
    sub r1[16u32].y r1[20u32].y into r118;
    ternary r116 r117 r118 into r119;
    mul r115 r115 into r120;
    mul r119 r119 into r121;
    add r120 r121 into r122;
    cast r1[16u32] r1[20u32] r122 into r123 as PointsCombinationDistance;
    gt r1[8u32].x r1[0u32].x into r124;
    sub r1[8u32].x r1[0u32].x into r125;
    sub r1[0u32].x r1[8u32].x into r126;
    ternary r124 r125 r126 into r127;
    gt r1[8u32].y r1[0u32].y into r128;
    sub r1[8u32].y r1[0u32].y into r129;
    sub r1[0u32].y r1[8u32].y into r130;
    ternary r128 r129 r130 into r131;
    mul r127 r127 into r132;
    mul r131 r131 into r133;
    add r132 r133 into r134;
    cast r1[0u32] r1[8u32] r134 into r135 as PointsCombinationDistance;
    gt r1[12u32].x r1[0u32].x into r136;
    sub r1[12u32].x r1[0u32].x into r137;
    sub r1[0u32].x r1[12u32].x into r138;
    ternary r136 r137 r138 into r139;
    gt r1[12u32].y r1[0u32].y into r140;
    sub r1[12u32].y r1[0u32].y into r141;
    sub r1[0u32].y r1[12u32].y into r142;
    ternary r140 r141 r142 into r143;
    mul r139 r139 into r144;
    mul r143 r143 into r145;
    add r144 r145 into r146;
    cast r1[0u32] r1[12u32] r146 into r147 as PointsCombinationDistance;
    gt r1[16u32].x r1[0u32].x into r148;
    sub r1[16u32].x r1[0u32].x into r149;
    sub r1[0u32].x r1[16u32].x into r150;
    ternary r148 r149 r150 into r151;
    gt r1[16u32].y r1[0u32].y into r152;
    sub r1[16u32].y r1[0u32].y into r153;
    sub r1[0u32].y r1[16u32].y into r154;
    ternary r152 r153 r154 into r155;
    mul r151 r151 into r156;
    mul r155 r155 into r157;
    add r156 r157 into r158;
    cast r1[0u32] r1[16u32] r158 into r159 as PointsCombinationDistance;
    gt r1[20u32].x r1[0u32].x into r160;
    sub r1[20u32].x r1[0u32].x into r161;
    sub r1[0u32].x r1[20u32].x into r162;
    ternary r160 r161 r162 into r163;
    gt r1[20u32].y r1[0u32].y into r164;
    sub r1[20u32].y r1[0u32].y into r165;
    sub r1[0u32].y r1[20u32].y into r166;
    ternary r164 r165 r166 into r167;
    mul r163 r163 into r168;
    mul r167 r167 into r169;
    add r168 r169 into r170;
    cast r1[0u32] r1[20u32] r170 into r171 as PointsCombinationDistance;
    cast r99r111r123r135r147r159r171 into r172 as [PointsCombinationDistance; 7u32];
    sub r87[0u32].distance r172[0u32].distance into r173;
    add 0i64 r173 into r174;
    sub r87[1u32].distance r172[1u32].distance into r175;
    add r174 r175 into r176;
    sub r87[2u32].distance r172[2u32].distance into r177;
    add r176 r177 into r178;
    sub r87[3u32].distance r172[3u32].distance into r179;
    add r178 r179 into r180;
    sub r87[4u32].distance r172[4u32].distance into r181;
    add r180 r181 into r182;
    sub r87[5u32].distance r172[5u32].distance into r183;
    add r182 r183 into r184;
    sub r87[6u32].distance r172[6u32].distance into r185;
    add r184 r185 into r186;
    div r186 7i64 into r187;
    lte r187 25i64 into r188;
    is.eq r188 true into r189;
    assert.eq r189 true;
